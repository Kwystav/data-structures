Singly and Doubly Linked Lists

    Outline
    - Disussion about Singly and Doubly Linked Lists
        - What is a linked list?
        - Where are linked lists used?
        - Terminology
        - Singly Linked vs. Doubly Linked
    - Implementation Details
        - How to insert new elements
        - How to remove element
    - Complexity analysis
    -Code Implementation(Doubly Linked List)


    What is a linked list?
        A linked list is a sequential list of nodes that hold data which point to other
            nodes also containing data.
        Data -> Data -> Data -> Data -> null 


    Where are linked lists used?
        - Used in many List, Queue & Stack implementations.
        - Great for creating circular lists.
        - Can easily model real world objects such as trains.
        - Used in separate chaining, which is present certain Hashable implementations
            to deal with hashing collisions.
        - Often used in the implementations of adjacency lists for graphs.


    Terminology
        Head: The first node in a linked list
        Tail: The last node in a linked list
        Pointer: Reference to another node
        Node: An object containing data and pointer(s)
        3 -> 84 -> 85 -> 21 -> 90 -> 29 -> 44 -> 30
        ^        ^                   ^           ^
        Head     Pointer             Node        Tail


    Singly vs. Doubly Linked Lists
        Singly linked lists only hold a reference to the next node. In the implementation
            you always maintain a reference to the head to the linked list and a reference
            to the head to the linked list and a reference to teh tail node for quick 
            additions/removals
        3 -> 84 -> 85 -> 21 -> 90 -> 29 -> 44 -> 30

        With a doubly linked list each node holds a reference to the next and previous node.
            In the implementation you always maintain a reference to the head and the tail 
            of the doubly linked list to do quick additions/removals from both ends of your 
            list.
        15 <-> 6 <-> 23 <-> 4 <-> 7 <-> 71 <-> 5 <-> 50


    Singly & Doubly Linked Lists Pros and collisions
                Pros                         Cons
        Singly- Uses less memory             Cannot easily access previous elements
                Simpler implementations      
        
        Doubly- Can be traversed backwards   Takes 2x memory


    Implementations
        Inserting Singly Linked List
            Insert 11 where the third node is.
    1.      Head             Tail 
               5 -> 23 -> 7 -> 13  
    
    2.      Head             Tail 
               5 -> 23 -> 7 -> 13  
               ^
            trav   

    3.      Head             Tail 
               5 -> 23 -> 7 -> 13  
                     ^
                  trav   

    4.      Head             Tail 
               5 -> 23 -> 7 -> 13  
                     ^    ^
                  trav   11

    5. Point the 23 to the 11.

    4.      Head                   Tail 
               5 -> 23 -> 11 -> 7 -> 13  

        Inserting Doubly Linked List
            Insert 11 where the third node is.
    1.      Head                Tail 
               5 <-> 23 <-> 7 <-> 13  

    2.      Head                Tail 
               5 <-> 23 <-> 7 <-> 13  
               ^
            trav   

    3.      Head                Tail 
               5 <-> 23 <-> 7 <-> 13  
                      ^
                   trav   

    4.      Head                Tail 
               5 <-> 23 <-> 7 <-> 13  
                      ^     ^
                   trav    11

    5. Point 11's next pointer to 7 and previous pointer to 23.

    6. Make 7's previous pointer 11.

    7. Make 23's next pointer to be 11.

    8.      Head                       Tail 
               5 <-> 23 <-> 11 <-> 7 <-> 13  
            
    Removing from Singly Linked List
            Remove 9 from the following SLL.
    1.      Head                 Tail 
               7 -> 0 -> 4 -> 9 -> 15  

    2.      Head                 Tail 
               7 -> 0 -> 4 -> 9 -> 15  
               ^    ^
           trav1  trav2   

    3.      Head                 Tail 
               7 -> 0 -> 4 -> 9 -> 15  
                    ^    ^
                trav1  trav2   

    4.      Head                 Tail 
               7 -> 0 -> 4 -> 9 -> 15  
                         ^    ^
                     trav1  trav2   

    5.      Head            temp   Tail 
               7 -> 0 -> 4 -> 9 -> 15  
                         ^    ^
                     trav1  trav2   

    6.      Head            temp   Tail 
               7 -> 0 -> 4 -> 9 -> 15  
                         ^         ^
                     trav1       trav2   

    7. Set trav1's next pointer to be trav2

    8. Remove 9.

    9.      Head            Tail 
               7 -> 0 -> 4 -> 15  
                         ^    ^
                     trav1  trav2   

    9. NOTE: Remember to clean up the memory to avoid memory leaks in a low-level 
        language such as C++

    Removing from Doubly Linked List
            Remove 9 from the following DLL.
    1.      Head                     Tail 
               7 <-> 0 <-> 4 <-> 9 <-> 15  

    2.      Head                     Tail 
               7 <-> 0 <-> 4 <-> 9 <-> 15  
               ^
             trav  

    3.      Head                     Tail 
               7 <-> 0 <-> 4 <-> 9 <-> 15  
                     ^
                   trav  

    4.      Head                     Tail 
               7 <-> 0 <-> 4 <-> 9 <-> 15  
                           ^
                         trav  

    5.      Head                     Tail 
               7 <-> 0 <-> 4 <-> 9 <-> 15  
                                 ^
                               trav  

    6. Set 4's pointer to be 15.
    7. Set 15's pointer to 4.
    8. Remove 9.

    9.      Head               Tail 
               7 <-> 0 <-> 4 <-> 15  

    Complexity Analysis
                Singly Linked   Doubly Linked
       Search-      0(n)            0(n)      

    Insert at-      0(1)            0(1)  
    head

    Insert at-      0(1)            0(1)
    tail

    Remove at-      0(1)            0(1)
    head

    Remove at-      0(n)            0(1)
    tail

    Remove in-      0(n)            0(n)
    middle